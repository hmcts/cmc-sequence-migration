#!groovy
@Library("Infrastructure") _
import uk.gov.hmcts.contino.AppPipelineConfig

properties([
        parameters([
                choice(name: 'ENVIRONMENT', choices: 'sandbox\npreview\ndemo\nithc\naat\nprod', description: 'Environment where migration should be run'),
                choice(name: 'SUBSCRIPTION', choices: 'sandbox\nqa\nnonprod\nprod', description: 'Azure subscriptions available to build in'),
                choice(name: 'REFERENCE_NUMBER_TYPE', choices: 'claim\nlegal', description: 'The Type of Reference Number')
        ])
])

def secretId = "cmc-" + params.ENVIRONMENT
def product = "cmc"
def component = "claim-store"

def secrets = [
        (secretId): [
                secret('claim-store-db-password', 'CLAIM_STORE_DB_PASSWORD'),
                secret('cmc-db-password', 'CMC_DB_PASSWORD')
        ]
]

static Map<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

try {
    node {
        def config = new AppPipelineConfig()
        config.vaultSecrets = secrets

        def subscription = "${params.SUBSCRIPTION}"

        stage('Checkout') {
            deleteDir()
            checkout scm
        }

         if (params.ENVIRONMENT == 'sandbox') {
              env.CLAIM_STORE_DB_HOST = 'pettyfrance.postgres.database.azure.com'
              env.CLAIM_STORE_DB_USERNAME = 'petadmin@pettyfrance'
              env.CLAIM_STORE_DB_PASSWORD = 'L%3_??MAN3p00l'

              env.CMC_DB_HOST = 'cmc-sandbox.postgres.database.azure.com'
              env.CMC_DB_USERNAME = 'cmc@cmc-sandbox'

         } else  if (params.ENVIRONMENT == 'aat') {
            env.CLAIM_STORE_DB_HOST = 'preprod-data-lb.moneyclaim.reform.hmcts.net'
            env.CMC_DB_HOST = 'cmc-aat.postgres.database.azure.com'
            env.CMC_DB_USERNAME = 'cmc@cmc-aat'

        } else if (params.ENVIRONMENT == 'preview') {
            env.CLAIM_STORE_DB_HOST = 'preprod-data-lb.moneyclaim.reform.hmcts.net'
            env.CMC_DB_HOST = ''
            env.CMC_DB_USERNAME = 'cmc@cmc-preview'

        } else if (params.ENVIRONMENT == 'demo') {
            env.CLAIM_STORE_DB_HOST = 'preprod-data-lb.moneyclaim.reform.hmcts.net'
            env.CMC_DB_HOST = 'cmc-demo.postgres.database.azure.com'
            env.CMC_DB_USERNAME = 'cmc@cmc-demo'

        } else if (params.ENVIRONMENT == 'ithc') {
            env.CLAIM_STORE_DB_HOST = 'preprod-data-lb.moneyclaim.reform.hmcts.net'
            env.CMC_DB_HOST = 'cmc-ithc.postgres.database.azure.com'
            env.CMC_DB_USERNAME = 'cmc@cmc-ithc'

        } else {

            env.CLAIM_STORE_DB_HOST = ''
            env.CMC_DB_HOST = ''
            env.CMC_DB_USERNAME = ''
        }

        env.CLAIM_STORE_DB_PORT = '5432'
        env.CLAIM_STORE_DB_NAME = 'claimstore'

        if (params.ENVIRONMENT != 'sandbox') {
            env.CLAIM_STORE_DB_USERNAME = 'claimstore'
        }

        env.CMC_DB_PORT = '5432'
        env.CMC_DB_NAME = 'cmc'

        // run migration scripts in postgres container
        stage('Run migration scripts') {
            withSubscription(subscription) {
                withTeamSecrets(config, params.ENVIRONMENT) {
                    withDocker('jbergknoff/postgresql-client', "--entrypoint='' -e PGPASSWORD=${CMC_DB_PASSWORD} -v ${WORKSPACE}:/migration") {
                      sh "chmod +x /migration/empty.sh"
                      sh "/migration/empty.sh \
                          ${CLAIM_STORE_DB_HOST} \
                          ${CLAIM_STORE_DB_PORT} \
                          ${CLAIM_STORE_DB_USERNAME} \
                          ${CLAIM_STORE_DB_PASSWORD} \
                          ${CLAIM_STORE_DB_NAME} \
                          ${params.REFERENCE_NUMBER_TYPE} \
                          ${CMC_DB_HOST} \
                          ${CMC_DB_PORT} \
                          ${CMC_DB_USERNAME} \
                          ${CMC_DB_PASSWORD} \
                          ${CMC_DB_NAME}"
                    }
               }
           }
        }

        stage('Clean up') {
            deleteDir()
        }
    }
}
catch (err) {
    throw err
}
